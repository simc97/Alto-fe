{"ast":null,"code":"import { EventEmitter } from 'events';\nimport AppDispatcher from '../dispatcher/AppDispatcher.js';\nimport moment from 'moment';\n\nlet missionJSON = require('../assets/data/mission.json');\n\nvar storage = {\n  mission: missionJSON // this is mock data, ideally we would call the api to set this value\n\n};\nconsole.log(storage.mission);\nvar TripDetailStore = Object.assign({}, EventEmitter.prototype, {\n  getMission: () => storage.mission,\n  getTrip: () => storage.mission.trip,\n  getDriver: () => storage.mission.driver,\n  getVehicle: () => storage.mission.vehicle,\n  getVibe: () => storage.mission.vibe,\n  dispatcherId: AppDispatcher.register(payload => {\n    var action = payload.action;\n\n    switch (payload.type) {\n      case 'SET_MISSION_DATA':\n        console.log('get here');\n\n        _transformData();\n\n        TripDetailStore.emit('change');\n        break;\n\n      default:\n        return null;\n    }\n  })\n});\n\nconst _transformData = () => {\n  console.log('hiii');\n  moment(storage.mission.trip.estimated_arrival).format();\n};\n\nexport default TripDetailStore;","map":{"version":3,"sources":["/Users/sim/Documents/React/Alto/alto-web/src/stores/TripDetailStore.js"],"names":["EventEmitter","AppDispatcher","moment","missionJSON","require","storage","mission","console","log","TripDetailStore","Object","assign","prototype","getMission","getTrip","trip","getDriver","driver","getVehicle","vehicle","getVibe","vibe","dispatcherId","register","payload","action","type","_transformData","emit","estimated_arrival","format"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,IAAIC,WAAW,GAAGC,OAAO,CAAC,6BAAD,CAAzB;;AAEA,IAAIC,OAAO,GAAG;AACVC,EAAAA,OAAO,EAAEH,WADC,CACW;;AADX,CAAd;AAIAI,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACC,OAApB;AAEA,IAAIG,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,YAAY,CAACY,SAA/B,EAA0C;AAE5DC,EAAAA,UAAU,EAAE,MAAMR,OAAO,CAACC,OAFkC;AAG5DQ,EAAAA,OAAO,EAAE,MAAMT,OAAO,CAACC,OAAR,CAAgBS,IAH6B;AAI5DC,EAAAA,SAAS,EAAE,MAAMX,OAAO,CAACC,OAAR,CAAgBW,MAJ2B;AAK5DC,EAAAA,UAAU,EAAE,MAAMb,OAAO,CAACC,OAAR,CAAgBa,OAL0B;AAM5DC,EAAAA,OAAO,EAAE,MAAMf,OAAO,CAACC,OAAR,CAAgBe,IAN6B;AAS5DC,EAAAA,YAAY,EAAErB,aAAa,CAACsB,QAAd,CAAuBC,OAAO,IAAI;AAC5C,QAAIC,MAAM,GAAGD,OAAO,CAACC,MAArB;;AAEA,YAAOD,OAAO,CAACE,IAAf;AACI,WAAK,kBAAL;AACInB,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACAmB,QAAAA,cAAc;;AACdlB,QAAAA,eAAe,CAACmB,IAAhB,CAAqB,QAArB;AACA;;AACJ;AACI,eAAO,IAAP;AAPR;AASH,GAZa;AAT8C,CAA1C,CAAtB;;AAwBA,MAAMD,cAAc,GAAG,MAAM;AACzBpB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAN,EAAAA,MAAM,CAACG,OAAO,CAACC,OAAR,CAAgBS,IAAhB,CAAqBc,iBAAtB,CAAN,CAA+CC,MAA/C;AACH,CAHD;;AAKA,eAAerB,eAAf","sourcesContent":["import { EventEmitter } from 'events';\nimport AppDispatcher from '../dispatcher/AppDispatcher.js';\nimport moment from 'moment';\n\nlet missionJSON = require('../assets/data/mission.json');\n\nvar storage = { \n    mission: missionJSON // this is mock data, ideally we would call the api to set this value\n};\n\nconsole.log(storage.mission)\n\nvar TripDetailStore = Object.assign({}, EventEmitter.prototype, {\n    \n    getMission: () => storage.mission,\n    getTrip: () => storage.mission.trip,\n    getDriver: () => storage.mission.driver,\n    getVehicle: () => storage.mission.vehicle,\n    getVibe: () => storage.mission.vibe,\n\n\n    dispatcherId: AppDispatcher.register(payload => {\n        var action = payload.action;\n\n        switch(payload.type) {\n            case 'SET_MISSION_DATA':\n                console.log('get here')\n                _transformData();\n                TripDetailStore.emit('change');\n                break;\n            default:\n                return null;\n        }\n    })\n});\n\nconst _transformData = () => {\n    console.log('hiii');\n    moment(storage.mission.trip.estimated_arrival).format()\n};\n\nexport default TripDetailStore;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { EventEmitter } from 'events';\nimport AppDispatcher from '../dispatcher/AppDispatcher.js';\n\nlet missionJSON = require('../assets/data/mission.json'); // this is mock data, ideally we would call the api to set this value\n\n\nconsole.log(missionJSON);\nconst initialState = {\n  mission: JSON.parse(JSON.stringify(missionJSON))\n};\nvar storage = {};\nconsole.log(storage.mission);\nTripDetailStore = Object.assign({}, EventEmitter.prototype, {\n  getTrip: () => missionJSON.trip,\n  getDriver: () => missionJSON.driver,\n  getVehicle: () => missionJSON.vehicle,\n  getVibe: () => missionJSON.vibe,\n  dispatcherId: AppDispatcher.register(payload => {\n    var action = payload.action;\n\n    switch (payload.type) {\n      case '':\n        TripDetailStore.emit('change');\n        break;\n\n      default:\n        return null;\n    }\n  })\n});\nexport default TripDetailStore;","map":{"version":3,"sources":["/Users/sim/Documents/React/Alto/alto-web/src/stores/TripDetailStore.js"],"names":["EventEmitter","AppDispatcher","missionJSON","require","console","log","initialState","mission","JSON","parse","stringify","storage","TripDetailStore","Object","assign","prototype","getTrip","trip","getDriver","driver","getVehicle","vehicle","getVibe","vibe","dispatcherId","register","payload","action","type","emit"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,IAAIC,WAAW,GAAGC,OAAO,CAAC,6BAAD,CAAzB,C,CACA;;;AAGAC,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,MAAMI,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,WAAf,CAAX;AADQ,CAArB;AAIA,IAAIS,OAAO,GAAG,EAAd;AAEAP,OAAO,CAACC,GAAR,CAAYM,OAAO,CAACJ,OAApB;AAA8BK,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,YAAY,CAACe,SAA/B,EAA0C;AAEtFC,EAAAA,OAAO,EAAE,MAAMd,WAAW,CAACe,IAF2D;AAGtFC,EAAAA,SAAS,EAAE,MAAMhB,WAAW,CAACiB,MAHyD;AAItFC,EAAAA,UAAU,EAAE,MAAMlB,WAAW,CAACmB,OAJwD;AAKtFC,EAAAA,OAAO,EAAE,MAAMpB,WAAW,CAACqB,IAL2D;AAQtFC,EAAAA,YAAY,EAAEvB,aAAa,CAACwB,QAAd,CAAuBC,OAAO,IAAI;AAC5C,QAAIC,MAAM,GAAGD,OAAO,CAACC,MAArB;;AAEA,YAAOD,OAAO,CAACE,IAAf;AACI,WAAK,EAAL;AAEIhB,QAAAA,eAAe,CAACiB,IAAhB,CAAqB,QAArB;AACA;;AACJ;AACI,eAAO,IAAP;AANR;AAQH,GAXa;AARwE,CAA1C,CAAlB;AAsB9B,eAAejB,eAAf","sourcesContent":["import { EventEmitter } from 'events';\nimport AppDispatcher from '../dispatcher/AppDispatcher.js';\n\nlet missionJSON = require('../assets/data/mission.json');\n// this is mock data, ideally we would call the api to set this value\n\n\nconsole.log(missionJSON);\nconst initialState = {\n    mission: JSON.parse(JSON.stringify(missionJSON)) \n}\n\nvar storage = {  };\n\nconsole.log(storage.mission); TripDetailStore = Object.assign({}, EventEmitter.prototype, {\n    \n    getTrip: () => missionJSON.trip,\n    getDriver: () => missionJSON.driver,\n    getVehicle: () => missionJSON.vehicle,\n    getVibe: () => missionJSON.vibe,\n\n\n    dispatcherId: AppDispatcher.register(payload => {\n        var action = payload.action;\n\n        switch(payload.type) {\n            case '':\n\n                TripDetailStore.emit('change');\n                break;\n            default:\n                return null;\n        }\n    })\n});\n\nexport default TripDetailStore;"]},"metadata":{},"sourceType":"module"}
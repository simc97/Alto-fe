{"ast":null,"code":"import { EventEmitter } from 'events';\nimport AppDispatcher from '../dispatcher/AppDispatcher.js';\n\nlet missionJSON = require('../assets/data/mission.json');\n\nconsole.log(miss);\nconst initialState = {\n  mission: missionJSON // this is mock data, ideally we would call the api to set this value\n\n};\nlet storage = {\n  initialState\n};\nconsole.log(storage.mission);\nconst TripDetailStore = Object.assign({}, EventEmitter.prototype, {\n  getTrip: () => storage.mission.trip,\n  getDriver: () => storage.mission.driver,\n  getVehicle: () => storage.mission.vehicle,\n  getVibe: () => storage.mission.vibe,\n  dispatcherId: AppDispatcher.register(payload => {\n    var action = payload.action;\n\n    switch (payload.type) {\n      case '':\n        TripDetailStore.emit('change');\n        break;\n\n      default:\n        return null;\n    }\n  })\n});\nexport default TripDetailStore;","map":{"version":3,"sources":["/Users/sim/Documents/React/Alto/alto-web/src/stores/TripDetailStore.js"],"names":["EventEmitter","AppDispatcher","missionJSON","require","console","log","miss","initialState","mission","storage","TripDetailStore","Object","assign","prototype","getTrip","trip","getDriver","driver","getVehicle","vehicle","getVibe","vibe","dispatcherId","register","payload","action","type","emit"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,IAAIC,WAAW,GAAGC,OAAO,CAAC,6BAAD,CAAzB;;AAEAC,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAEN,WADQ,CACI;;AADJ,CAArB;AAIA,IAAIO,OAAO,GAAG;AAAEF,EAAAA;AAAF,CAAd;AAEAH,OAAO,CAACC,GAAR,CAAYI,OAAO,CAACD,OAApB;AACA,MAAME,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,YAAY,CAACa,SAA/B,EAA0C;AAE9DC,EAAAA,OAAO,EAAE,MAAML,OAAO,CAACD,OAAR,CAAgBO,IAF+B;AAG9DC,EAAAA,SAAS,EAAE,MAAMP,OAAO,CAACD,OAAR,CAAgBS,MAH6B;AAI9DC,EAAAA,UAAU,EAAE,MAAMT,OAAO,CAACD,OAAR,CAAgBW,OAJ4B;AAK9DC,EAAAA,OAAO,EAAE,MAAMX,OAAO,CAACD,OAAR,CAAgBa,IAL+B;AAQ9DC,EAAAA,YAAY,EAAErB,aAAa,CAACsB,QAAd,CAAuBC,OAAO,IAAI;AAC5C,QAAIC,MAAM,GAAGD,OAAO,CAACC,MAArB;;AAEA,YAAOD,OAAO,CAACE,IAAf;AACI,WAAK,EAAL;AAEIhB,QAAAA,eAAe,CAACiB,IAAhB,CAAqB,QAArB;AACA;;AACJ;AACI,eAAO,IAAP;AANR;AAQH,GAXa;AARgD,CAA1C,CAAxB;AAsBA,eAAejB,eAAf","sourcesContent":["import { EventEmitter } from 'events';\nimport AppDispatcher from '../dispatcher/AppDispatcher.js';\n\nlet missionJSON = require('../assets/data/mission.json');\n\nconsole.log(miss)\nconst initialState = {\n    mission: missionJSON // this is mock data, ideally we would call the api to set this value\n};\n\nlet storage = { initialState };\n\nconsole.log(storage.mission);\nconst TripDetailStore = Object.assign({}, EventEmitter.prototype, {\n    \n    getTrip: () => storage.mission.trip,\n    getDriver: () => storage.mission.driver,\n    getVehicle: () => storage.mission.vehicle,\n    getVibe: () => storage.mission.vibe,\n\n\n    dispatcherId: AppDispatcher.register(payload => {\n        var action = payload.action;\n\n        switch(payload.type) {\n            case '':\n\n                TripDetailStore.emit('change');\n                break;\n            default:\n                return null;\n        }\n    })\n});\n\nexport default TripDetailStore;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule Dispatcher\r\n * \r\n * @preventMunge\r\n */\n'use strict';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _prefix = 'ID_';\n/**\r\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\r\n * different from generic pub-sub systems in two ways:\r\n *\r\n *   1) Callbacks are not subscribed to particular events. Every payload is\r\n *      dispatched to every registered callback.\r\n *   2) Callbacks can be deferred in whole or part until other callbacks have\r\n *      been executed.\r\n *\r\n * For example, consider this hypothetical flight destination form, which\r\n * selects a default city when a country is selected:\r\n *\r\n *   var flightDispatcher = new Dispatcher();\r\n *\r\n *   // Keeps track of which country is selected\r\n *   var CountryStore = {country: null};\r\n *\r\n *   // Keeps track of which city is selected\r\n *   var CityStore = {city: null};\r\n *\r\n *   // Keeps track of the base flight price of the selected city\r\n *   var FlightPriceStore = {price: null}\r\n *\r\n * When a user changes the selected city, we dispatch the payload:\r\n *\r\n *   flightDispatcher.dispatch({\r\n *     actionType: 'city-update',\r\n *     selectedCity: 'paris'\r\n *   });\r\n *\r\n * This payload is digested by `CityStore`:\r\n *\r\n *   flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'city-update') {\r\n *       CityStore.city = payload.selectedCity;\r\n *     }\r\n *   });\r\n *\r\n * When the user selects a country, we dispatch the payload:\r\n *\r\n *   flightDispatcher.dispatch({\r\n *     actionType: 'country-update',\r\n *     selectedCountry: 'australia'\r\n *   });\r\n *\r\n * This payload is digested by both stores:\r\n *\r\n *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'country-update') {\r\n *       CountryStore.country = payload.selectedCountry;\r\n *     }\r\n *   });\r\n *\r\n * When the callback to update `CountryStore` is registered, we save a reference\r\n * to the returned token. Using this token with `waitFor()`, we can guarantee\r\n * that `CountryStore` is updated before the callback that updates `CityStore`\r\n * needs to query its data.\r\n *\r\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'country-update') {\r\n *       // `CountryStore.country` may not be updated.\r\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\r\n *       // `CountryStore.country` is now guaranteed to be updated.\r\n *\r\n *       // Select the default city for the new country\r\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\r\n *     }\r\n *   });\r\n *\r\n * The usage of `waitFor()` can be chained, for example:\r\n *\r\n *   FlightPriceStore.dispatchToken =\r\n *     flightDispatcher.register(function(payload) {\r\n *       switch (payload.actionType) {\r\n *         case 'country-update':\r\n *         case 'city-update':\r\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\r\n *           FlightPriceStore.price =\r\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\r\n *           break;\r\n *     }\r\n *   });\r\n *\r\n * The `country-update` payload will be guaranteed to invoke the stores'\r\n * registered callbacks in order: `CountryStore`, `CityStore`, then\r\n * `FlightPriceStore`.\r\n */\n\nvar Dispatcher = /*#__PURE__*/function () {\n  function Dispatcher() {\n    _defineProperty(this, \"_callbacks\", void 0);\n\n    _defineProperty(this, \"_isDispatching\", void 0);\n\n    _defineProperty(this, \"_isHandled\", void 0);\n\n    _defineProperty(this, \"_isPending\", void 0);\n\n    _defineProperty(this, \"_lastID\", void 0);\n\n    _defineProperty(this, \"_pendingPayload\", void 0);\n\n    this._callbacks = {};\n    this._isDispatching = false;\n    this._isHandled = {};\n    this._isPending = {};\n    this._lastID = 1;\n  }\n  /**\r\n   * Registers a callback to be invoked with every dispatched payload. Returns\r\n   * a token that can be used with `waitFor()`.\r\n   */\n\n\n  var _proto = Dispatcher.prototype;\n\n  _proto.register = function register(callback) {\n    var id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  }\n  /**\r\n   * Removes a callback based on its token.\r\n   */\n  ;\n\n  _proto.unregister = function unregister(id) {\n    !this._callbacks[id] ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : void 0;\n    delete this._callbacks[id];\n  }\n  /**\r\n   * Waits for the callbacks specified to be invoked before continuing execution\r\n   * of the current callback. This method should only be used by a callback in\r\n   * response to a dispatched payload.\r\n   */\n  ;\n\n  _proto.waitFor = function waitFor(ids) {\n    !this._isDispatching ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : void 0;\n\n    for (var ii = 0; ii < ids.length; ii++) {\n      var id = ids[ii];\n\n      if (this._isPending[id]) {\n        !this._isHandled[id] ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : void 0;\n        continue;\n      }\n\n      !this._callbacks[id] ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : void 0;\n\n      this._invokeCallback(id);\n    }\n  }\n  /**\r\n   * Dispatches a payload to all registered callbacks.\r\n   */\n  ;\n\n  _proto.dispatch = function dispatch(payload) {\n    !!this._isDispatching ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : void 0;\n\n    this._startDispatching(payload);\n\n    try {\n      for (var id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  }\n  /**\r\n   * Is this Dispatcher currently dispatching.\r\n   */\n  ;\n\n  _proto.isDispatching = function isDispatching() {\n    return this._isDispatching;\n  }\n  /**\r\n   * Call the callback stored with the given id. Also do some internal\r\n   * bookkeeping.\r\n   *\r\n   * @internal\r\n   */\n  ;\n\n  _proto._invokeCallback = function _invokeCallback(id) {\n    this._isPending[id] = true;\n\n    this._callbacks[id](this._pendingPayload);\n\n    this._isHandled[id] = true;\n  }\n  /**\r\n   * Set up bookkeeping needed when dispatching.\r\n   *\r\n   * @internal\r\n   */\n  ;\n\n  _proto._startDispatching = function _startDispatching(payload) {\n    for (var id in this._callbacks) {\n      this._isPending[id] = false;\n      this._isHandled[id] = false;\n    }\n\n    this._pendingPayload = payload;\n    this._isDispatching = true;\n  }\n  /**\r\n   * Clear bookkeeping used for dispatching.\r\n   *\r\n   * @internal\r\n   */\n  ;\n\n  _proto._stopDispatching = function _stopDispatching() {\n    delete this._pendingPayload;\n    this._isDispatching = false;\n  };\n\n  return Dispatcher;\n}();\n\nmodule.exports = Dispatcher;","map":{"version":3,"sources":["/Users/sim/Documents/React/Alto/alto-web/node_modules/flux/lib/Dispatcher.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","invariant","require","_prefix","Dispatcher","_callbacks","_isDispatching","_isHandled","_isPending","_lastID","_proto","prototype","register","callback","id","unregister","process","env","NODE_ENV","waitFor","ids","ii","length","_invokeCallback","dispatch","payload","_startDispatching","_stopDispatching","isDispatching","_pendingPayload","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule Dispatcher\r\n * \r\n * @preventMunge\r\n */\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _prefix = 'ID_';\n/**\r\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\r\n * different from generic pub-sub systems in two ways:\r\n *\r\n *   1) Callbacks are not subscribed to particular events. Every payload is\r\n *      dispatched to every registered callback.\r\n *   2) Callbacks can be deferred in whole or part until other callbacks have\r\n *      been executed.\r\n *\r\n * For example, consider this hypothetical flight destination form, which\r\n * selects a default city when a country is selected:\r\n *\r\n *   var flightDispatcher = new Dispatcher();\r\n *\r\n *   // Keeps track of which country is selected\r\n *   var CountryStore = {country: null};\r\n *\r\n *   // Keeps track of which city is selected\r\n *   var CityStore = {city: null};\r\n *\r\n *   // Keeps track of the base flight price of the selected city\r\n *   var FlightPriceStore = {price: null}\r\n *\r\n * When a user changes the selected city, we dispatch the payload:\r\n *\r\n *   flightDispatcher.dispatch({\r\n *     actionType: 'city-update',\r\n *     selectedCity: 'paris'\r\n *   });\r\n *\r\n * This payload is digested by `CityStore`:\r\n *\r\n *   flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'city-update') {\r\n *       CityStore.city = payload.selectedCity;\r\n *     }\r\n *   });\r\n *\r\n * When the user selects a country, we dispatch the payload:\r\n *\r\n *   flightDispatcher.dispatch({\r\n *     actionType: 'country-update',\r\n *     selectedCountry: 'australia'\r\n *   });\r\n *\r\n * This payload is digested by both stores:\r\n *\r\n *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'country-update') {\r\n *       CountryStore.country = payload.selectedCountry;\r\n *     }\r\n *   });\r\n *\r\n * When the callback to update `CountryStore` is registered, we save a reference\r\n * to the returned token. Using this token with `waitFor()`, we can guarantee\r\n * that `CountryStore` is updated before the callback that updates `CityStore`\r\n * needs to query its data.\r\n *\r\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'country-update') {\r\n *       // `CountryStore.country` may not be updated.\r\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\r\n *       // `CountryStore.country` is now guaranteed to be updated.\r\n *\r\n *       // Select the default city for the new country\r\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\r\n *     }\r\n *   });\r\n *\r\n * The usage of `waitFor()` can be chained, for example:\r\n *\r\n *   FlightPriceStore.dispatchToken =\r\n *     flightDispatcher.register(function(payload) {\r\n *       switch (payload.actionType) {\r\n *         case 'country-update':\r\n *         case 'city-update':\r\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\r\n *           FlightPriceStore.price =\r\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\r\n *           break;\r\n *     }\r\n *   });\r\n *\r\n * The `country-update` payload will be guaranteed to invoke the stores'\r\n * registered callbacks in order: `CountryStore`, `CityStore`, then\r\n * `FlightPriceStore`.\r\n */\n\nvar Dispatcher = /*#__PURE__*/function () {\n  function Dispatcher() {\n    _defineProperty(this, \"_callbacks\", void 0);\n\n    _defineProperty(this, \"_isDispatching\", void 0);\n\n    _defineProperty(this, \"_isHandled\", void 0);\n\n    _defineProperty(this, \"_isPending\", void 0);\n\n    _defineProperty(this, \"_lastID\", void 0);\n\n    _defineProperty(this, \"_pendingPayload\", void 0);\n\n    this._callbacks = {};\n    this._isDispatching = false;\n    this._isHandled = {};\n    this._isPending = {};\n    this._lastID = 1;\n  }\n  /**\r\n   * Registers a callback to be invoked with every dispatched payload. Returns\r\n   * a token that can be used with `waitFor()`.\r\n   */\n\n\n  var _proto = Dispatcher.prototype;\n\n  _proto.register = function register(callback) {\n    var id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  }\n  /**\r\n   * Removes a callback based on its token.\r\n   */\n  ;\n\n  _proto.unregister = function unregister(id) {\n    !this._callbacks[id] ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : void 0;\n    delete this._callbacks[id];\n  }\n  /**\r\n   * Waits for the callbacks specified to be invoked before continuing execution\r\n   * of the current callback. This method should only be used by a callback in\r\n   * response to a dispatched payload.\r\n   */\n  ;\n\n  _proto.waitFor = function waitFor(ids) {\n    !this._isDispatching ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : void 0;\n\n    for (var ii = 0; ii < ids.length; ii++) {\n      var id = ids[ii];\n\n      if (this._isPending[id]) {\n        !this._isHandled[id] ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : void 0;\n        continue;\n      }\n\n      !this._callbacks[id] ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : void 0;\n\n      this._invokeCallback(id);\n    }\n  }\n  /**\r\n   * Dispatches a payload to all registered callbacks.\r\n   */\n  ;\n\n  _proto.dispatch = function dispatch(payload) {\n    !!this._isDispatching ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : void 0;\n\n    this._startDispatching(payload);\n\n    try {\n      for (var id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  }\n  /**\r\n   * Is this Dispatcher currently dispatching.\r\n   */\n  ;\n\n  _proto.isDispatching = function isDispatching() {\n    return this._isDispatching;\n  }\n  /**\r\n   * Call the callback stored with the given id. Also do some internal\r\n   * bookkeeping.\r\n   *\r\n   * @internal\r\n   */\n  ;\n\n  _proto._invokeCallback = function _invokeCallback(id) {\n    this._isPending[id] = true;\n\n    this._callbacks[id](this._pendingPayload);\n\n    this._isHandled[id] = true;\n  }\n  /**\r\n   * Set up bookkeeping needed when dispatching.\r\n   *\r\n   * @internal\r\n   */\n  ;\n\n  _proto._startDispatching = function _startDispatching(payload) {\n    for (var id in this._callbacks) {\n      this._isPending[id] = false;\n      this._isHandled[id] = false;\n    }\n\n    this._pendingPayload = payload;\n    this._isDispatching = true;\n  }\n  /**\r\n   * Clear bookkeeping used for dispatching.\r\n   *\r\n   * @internal\r\n   */\n  ;\n\n  _proto._stopDispatching = function _stopDispatching() {\n    delete this._pendingPayload;\n    this._isDispatching = false;\n  };\n\n  return Dispatcher;\n}();\n\nmodule.exports = Dispatcher;"]},"metadata":{},"sourceType":"script"}